{"version":3,"sources":["ticker/TickerlistComponent.js","ticker/TickerComponent.js","App.js","serviceWorker.js","index.js"],"names":["TickerlistComponent","rates","push","react_default","a","createElement","className","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","this","props","Symbol","iterator","next","done","_ref3","value","_ref2","Object","slicedToArray","name","price","color","updated","err","return","Component","TickerComponent","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","exchangerates","oldexchangerates","data","result","JSON","parse","today","Date","currenttime","getHours","getMinutes","getSeconds","forEach","_ref","index","parseFloat","toFixed","setState","oldrates","_ref4","_ref5","indexold","_ref6","oldname","oldprice","Fragment","build_default","url","onMessage","handleData","bind","ticker_TickerlistComponent","App","ticker_TickerComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a0ad6091.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nclass TickerlistComponent extends Component {\r\n    render() {\r\n        let rates = [];\r\n        rates.push(\r\n            <li>\r\n                <span className=\"name\">Name</span>\r\n                <span className=\"white\">Rates</span>\r\n                <span className=\"updated-time\">Updated</span>\r\n            </li>\r\n        );\r\n        // console.log(this.props.rates);\r\n        for(let [name,price,color,updated] of this.props.rates) {\r\n            rates.push(\r\n                <li>\r\n                    <span className=\"name\">{name}</span>\r\n                    <span className={color}>{price}</span>\r\n                    <span className=\"updated-time\">{updated}</span>\r\n                </li>\r\n            );\r\n        }\r\n        return ( \r\n            <div className=\"ticker-container\">{rates}</div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default TickerlistComponent;","import React, { Component } from 'react';\r\nimport WebSocket from 'react-websocket';\r\nimport TickerlistComponent from './TickerlistComponent';\r\nimport './Ticker.css'\r\nclass TickerComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            exchangerates: '',\r\n            oldexchangerates: ''\r\n        }\r\n    }\r\n    handleData(data) {\r\n        let result = JSON.parse(data);\r\n        let today = new Date();\r\n        let currenttime = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\r\n        if(this.state.exchangerates === '') {\r\n            result.forEach(\r\n                ([name, price],index) => {\r\n                    result[index][1] = parseFloat(result[index][1]).toFixed(2);\r\n                    result[index][2] = 'white';\r\n                    result[index][3] = currenttime;\r\n                }\r\n            );\r\n            this.setState({exchangerates: result});\r\n            this.setState({oldexchangerates: result});\r\n        } else {\r\n            this.setState({exchangerates: result});\r\n            let oldrates = this.state.oldexchangerates;\r\n            result.forEach(\r\n                ([name, price],index) => {\r\n                    oldrates.forEach(([oldname,oldprice],indexold) => {\r\n                        if((oldname === name) && (oldprice > price)) {\r\n                            oldrates[indexold][1] = parseFloat(price).toFixed(2);\r\n                            oldrates[indexold][2] = 'red';\r\n                            oldrates[indexold][3] = currenttime;\r\n                        } else if((oldname === name) && (oldprice < price)) {\r\n                            oldrates[indexold][1] = parseFloat(price).toFixed(2);\r\n                            oldrates[indexold][2] = 'green';\r\n                            oldrates[indexold][3] = currenttime;\r\n                        } else if((oldname !== name) && (oldprice !== price)) {\r\n                        }\r\n                    });\r\n                }\r\n            );\r\n            this.setState({exchangerates: oldrates});\r\n        }\r\n    }\r\n    render() { \r\n        return ( \r\n            <React.Fragment>\r\n                <WebSocket url='ws://stocks.mnet.website' onMessage={this.handleData.bind(this)}/>\r\n                <TickerlistComponent rates={this.state.exchangerates}></TickerlistComponent>\r\n            </React.Fragment>\r\n         );\r\n    }\r\n}\r\n \r\nexport default TickerComponent;","import React from 'react';\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\nimport TickerComponent from './ticker/TickerComponent'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      {/* <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header> */}\r\n      <TickerComponent/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}